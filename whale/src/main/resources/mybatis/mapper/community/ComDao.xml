<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tech.whale.community.dao.ComDao">
	

    <select id="getComAll" parameterType="string" resultType="com.tech.whale.community.dto.CommunityDto">
	    SELECT * FROM COMMUNITY
	    ORDER BY 
	        CASE 
	            WHEN ',' || COMMUNITY_FOLLOW || ',' LIKE '%,' || #{userId} || ',%' THEN 0
	            ELSE 1
	        END,
	        COMMUNITY_ID ASC
    </select>
    
    <select id="getCommunityName" resultType="java.lang.String">
        SELECT COMMUNITY_NAME_EN FROM COMMUNITY WHERE COMMUNITY_ID = #{param1}
    </select>
    
    <select id="chooseTag" resultType="com.tech.whale.community.dto.PostDto">
        SELECT POST_TAG_ID, POST_TAG_TEXT FROM POST_TAG
    </select>
    
	<sql id="includeCount">
	    <choose>
	        <when test="param2 == 1">
	            AND POST_TITLE LIKE '%' || #{param1} || '%'
	        </when>
	        <when test="param2 == 2">
	            AND POST_TEXT LIKE '%' || #{param1} || '%'
	        </when>
	        <when test="param2 == 3">
	            AND (POST_TITLE LIKE '%' || #{param1} || '%' OR POST_TEXT LIKE '%' || #{param1} || '%')
	        </when>
	    </choose>
	</sql>
	
	<sql id="includeList">
	    <choose>
	        <when test="param4 == 1">
	            AND p.POST_TITLE LIKE '%' || #{param3} || '%'
	        </when>
	        <when test="param4 == 2">
	            AND p.POST_TEXT LIKE '%' || #{param3} || '%'
	        </when>
	        <when test="param4 == 3">
	            AND (p.POST_TITLE LIKE '%' || #{param3} || '%' OR p.POST_TEXT LIKE '%' || #{param3} || '%')
	        </when>
	    </choose>
	</sql>
	
	<select id="getPostAll" resultType="com.tech.whale.community.dto.PostDto">
	    SELECT p.POST_ID, p.COMMUNITY_ID, p.USER_ID, p.POST_TITLE, p.POST_TEXT, 
	           TO_CHAR(p.POST_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"', 'NLS_DATE_LANGUAGE = KOREAN') AS POST_DATE, 
	           p.POST_URL, p.POST_CNT, p.POST_NUM, p.POST_TAG_ID, p.POST_TAG_TEXT,
	           p.USER_NICKNAME, p.USER_IMAGE_URL, 
	           NVL(like_count.likeCount, 0) AS likeCount -- 좋아요 수 추가
	    FROM (
	        SELECT p.POST_ID, p.COMMUNITY_ID, p.USER_ID, p.POST_TITLE, p.POST_TEXT, 
	               p.POST_DATE,  -- 원래의 날짜 타입 사용
	               p.POST_URL, p.POST_CNT, p.POST_NUM, p.POST_TAG_ID, t.POST_TAG_TEXT,
	               u.USER_NICKNAME, u.USER_IMAGE_URL,  -- 유저 정보 추가
	               ROW_NUMBER() OVER(ORDER BY p.POST_ID DESC) AS POST_SEQ
	        FROM POST p
	        JOIN POST_TAG t ON p.POST_TAG_ID = t.POST_TAG_ID
	        JOIN USER_INFO u ON p.USER_ID = u.USER_ID  -- 유저 정보와 조인
	        WHERE p.COMMUNITY_ID = #{param5}
	        <include refid="includeList" />
	        <if test="param6 != null and param6 != -1">
	            AND p.POST_TAG_ID = #{param6}
	        </if>
	    ) p
	    LEFT JOIN (
	        SELECT POST_ID, COUNT(*) AS likeCount
	        FROM POST_LIKE
	        GROUP BY POST_ID
	    ) like_count ON p.POST_ID = like_count.POST_ID -- 좋아요 수 조인
	    WHERE POST_SEQ BETWEEN #{param1} AND #{param2}
	</select>
    
    <select id="selectBoardCount" resultType="Integer">
        SELECT COUNT(*) FROM POST 
        WHERE COMMUNITY_ID = #{param3}
        <include refid="includeCount" />
        <if test="param4 != null and param4 != -1">
            AND POST_TAG_ID = #{param4}
        </if>
    </select>
    
    <resultMap id="CommentResultMap" type="com.tech.whale.community.dto.CommentDto">
        <id property="post_comments_id" column="POST_COMMENTS_ID"/>
        <result property="user_id" column="USER_ID"/>
        <result property="post_comments_text" column="POST_COMMENTS_TEXT"/>
        <result property="post_comments_date" column="POST_COMMENTS_DATE"/>
        <result property="parent_comments_id" column="PARENT_COMMENTS_ID"/>
        <result property="user_image_url" column="USER_IMAGE_URL"/>
        <result property="likeCount" column="LIKE_COUNT"/>
        <result property="replyCount" column="REPLY_COUNT"/>
    </resultMap>
    
    <resultMap id="PostResultMap" type="com.tech.whale.community.dto.PostDto">
	    <id property="post_id" column="POST_ID"/>
	    <result property="user_id" column="USER_ID"/>
	    <result property="post_text" column="POST_TEXT"/>
	    <result property="post_date" column="POST_DATE"/>
	    <result property="post_cnt" column="POST_CNT"/>
	    <result property="post_title" column="POST_TITLE"/>
	    <result property="post_tag_text" column="POST_TAG_TEXT"/>
	    
		<result property="track_id" column="TRACK_ID"/>
	    <result property="track_cover" column="TRACK_COVER"/>
	    <result property="track_name" column="TRACK_NAME"/>
	    <result property="track_artist" column="TRACK_ARTIST"/>
	    
	</resultMap>
    
	<select id="getPost" resultMap="PostResultMap">
	    SELECT 
	        P.POST_ID, 
	        P.USER_ID, 
	        P.POST_TEXT, 
	        TO_CHAR(P.POST_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"', 'NLS_DATE_LANGUAGE = KOREAN') AS POST_DATE, 
	        P.POST_CNT, 
	        P.POST_TITLE, 
	        U.USER_IMAGE_URL,
	        T.TRACK_ID,
	        T.TRACK_COVER,
	        T.TRACK_NAME,
	        T.TRACK_ARTIST,
	        (SELECT COUNT(*) FROM POST_LIKE PL WHERE PL.POST_ID = P.POST_ID) AS LIKE_COUNT,
	        (SELECT COUNT(*) FROM POST_COMMENTS PC WHERE PC.POST_ID = P.POST_ID) AS COMMENTS_COUNT
	    FROM POST P 
	    JOIN POST_TAG T ON P.POST_TAG_ID = T.POST_TAG_ID
	    LEFT JOIN POST_MUSIC M ON P.POST_ID = M.POST_ID
	    LEFT JOIN TRACK T ON M.TRACK_ID = T.TRACK_ID
	    LEFT JOIN USER_INFO U ON P.USER_ID = U.USER_ID
	    WHERE P.POST_ID = #{param1}
	</select>
	
    <update id="upCnt">
		UPDATE POST SET POST_CNT = POST_CNT + 1 WHERE POST_ID = #{param1}
	</update>
    
    
    <!-- 특정 사용자가 해당 게시글에 좋아요를 눌렀는지 확인 -->
    <select id="checkUserLikedPost" resultType="int">
        SELECT COUNT(*) 
        FROM post_like
        WHERE post_id = #{postId} AND user_id = #{userId}
    </select>

    <!-- 좋아요 추가 -->
    <insert id="insertLike">
        INSERT INTO post_like (post_like_id, post_id, user_id)
        VALUES (POST_LIKE_SEQ.NEXTVAL, #{postId}, #{userId})
    </insert>

    <!-- 좋아요 취소 -->
    <delete id="deleteLike">
        DELETE FROM post_like 
        WHERE post_id = #{postId} AND user_id = #{userId}
    </delete>

    <!-- 게시글의 총 좋아요 수 가져오기 -->
    <select id="getLikeCount" resultType="int">
        SELECT COUNT(*) 
        FROM post_like
        WHERE post_id = #{postId}
    </select>
    
	<insert id="insertComments">
	    INSERT INTO POST_COMMENTS (POST_COMMENTS_ID, POST_ID, USER_ID, POST_COMMENTS_TEXT, POST_COMMENTS_DATE, PARENT_COMMENTS_ID)
	    VALUES (POST_COMMENTS_SEQ.NEXTVAL, #{postId}, #{userId}, #{comments}, SYSDATE, #{parentCommentId})
	</insert>
    
	<delete id="deleteComments">
	    DELETE FROM POST_COMMENTS
	    WHERE POST_COMMENTS_ID = #{postCommentsId} OR PARENT_COMMENTS_ID = #{postCommentsId}
	</delete>
    
	<select id="getComments" resultMap="CommentResultMap">
	    SELECT 
	        c.POST_COMMENTS_ID,
	        c.USER_ID,
	        c.POST_COMMENTS_TEXT,
	        TO_CHAR(c.POST_COMMENTS_DATE, 'YYYY"년" MM"월" DD"일" HH24"시 "MI"분"', 'NLS_DATE_LANGUAGE = KOREAN') AS POST_COMMENTS_DATE,
	        c.PARENT_COMMENTS_ID,
	        u.USER_IMAGE_URL,
	        (SELECT COUNT(*) FROM POST_COMMENTS_LIKE pcl WHERE pcl.POST_COMMENTS_ID = c.POST_COMMENTS_ID) AS LIKE_COUNT,
	        (SELECT COUNT(*) FROM POST_COMMENTS pc WHERE pc.PARENT_COMMENTS_ID = c.POST_COMMENTS_ID) AS REPLY_COUNT
	    FROM POST_COMMENTS c
	    JOIN USER_INFO u ON c.USER_ID = u.USER_ID
	    WHERE c.POST_ID = #{postId} AND c.PARENT_COMMENTS_ID IS NULL
	    ORDER BY c.POST_COMMENTS_DATE ASC
	</select>
	
	<select id="getReplies" resultMap="CommentResultMap">
	    SELECT 
	        c.POST_COMMENTS_ID,
	        c.USER_ID,
	        c.POST_COMMENTS_TEXT,
	        TO_CHAR(c.POST_COMMENTS_DATE, 'YYYY"년" MM"월" DD"일" HH24"시 "MI"분"', 'NLS_DATE_LANGUAGE = KOREAN') AS POST_COMMENTS_DATE,
	        c.PARENT_COMMENTS_ID,
	        u.USER_IMAGE_URL,
	        (SELECT COUNT(*) FROM POST_COMMENTS_LIKE pcl WHERE pcl.POST_COMMENTS_ID = c.POST_COMMENTS_ID) AS LIKE_COUNT
	    FROM POST_COMMENTS c
	    JOIN USER_INFO u ON c.USER_ID = u.USER_ID
	    WHERE c.PARENT_COMMENTS_ID = #{parentCommentId}
	    ORDER BY c.POST_COMMENTS_DATE ASC
	</select>
    
    <select id="checkUserLikedComment" resultType="int">
	    SELECT COUNT(*)
	    FROM POST_COMMENTS_LIKE
	    WHERE POST_COMMENTS_ID = #{commentId} AND USER_ID = #{userId}
	</select>
	
	<!-- 댓글 좋아요 추가 -->
	<insert id="insertCommentLike">
	    INSERT INTO POST_COMMENTS_LIKE (POST_COMMENTS_LIKE_ID, POST_COMMENTS_ID, USER_ID)
	    VALUES (POST_COMMENTS_LIKE_SEQ.NEXTVAL, #{commentId}, #{userId})
	</insert>
	
	<!-- 댓글 좋아요 취소 -->
	<delete id="deleteCommentLike">
	    DELETE FROM POST_COMMENTS_LIKE
	    WHERE POST_COMMENTS_ID = #{commentId} AND USER_ID = #{userId}
	</delete>
	
	<!-- 댓글의 총 좋아요 수 -->
	<select id="getCommentLikeCount" resultType="int">
	    SELECT COUNT(*)
	    FROM POST_COMMENTS_LIKE
	    WHERE POST_COMMENTS_ID = #{commentId}
	</select>
    
    <select id="getCommentsCount" resultType="int">
        SELECT COUNT(*)
        FROM POST_COMMENTS
        WHERE POST_ID = #{postId}
    </select>
    
    
        <!-- 게시글 등록 쿼리 -->
	<select id="getNextPostId" resultType="int">
	    SELECT POST_SEQ.NEXTVAL FROM DUAL
	</select>
	
	<select id="getNextPostMusicId" resultType="int">
		SELECT POST_MUSIC_SEQ.NEXTVAL FROM DUAL
	</select>
	
	
	<insert id="insertPost">
	    INSERT INTO POST (POST_ID, COMMUNITY_ID, USER_ID, POST_TITLE, POST_TEXT, POST_NUM, POST_DATE, POST_TAG_ID, POST_CNT)
	    VALUES (#{post_id}, #{community_id}, #{user_id}, #{post_title}, #{post_text},
	            (SELECT NVL(MAX(POST_NUM), 0) + 1 FROM POST WHERE COMMUNITY_ID = #{community_id}), -- POST_NUM 계산
	            SYSDATE, #{post_tag_id}, 0)
	</insert>
	
	<insert id="insertPostMusic">
		INSERT INTO POST_MUSIC (POST_MUSIC_ID, POST_ID, TRACK_ID)
		VALUES (#{post_music_id}, #{post_id}, #{track_id})
	</insert>
	
	<select id="getPostNumById" resultType="String">
	    SELECT POST_NUM FROM POST WHERE POST_ID = #{param1}
	</select>
	
	<delete id="deletePost">
		DELETE FROM POST WHERE POST_ID = #{param1}
	</delete>
	
	<update id="updatePostNumsAfterDeletion">
	    UPDATE POST
	    SET POST_NUM = POST_NUM - 1
	    WHERE COMMUNITY_ID = #{communityId} 
	    AND POST_NUM > #{postNum}
	</update>
    
    <update id="updatePostMusic">
        UPDATE POST_MUSIC 
        SET TRACK_ID = #{trackId} 
        WHERE POST_ID = #{postId}
    </update>

    <!-- 음악 정보 삭제 -->
    <delete id="deletePostMusic">
        DELETE FROM POST_MUSIC 
        WHERE POST_ID = #{postId}
    </delete>
    
    <update id="updatePost" parameterType="com.tech.whale.community.dto.PostDto">
        UPDATE POST
        SET post_tag_id = #{post_tag_id},
            post_title = #{post_title},
            post_text = #{post_text}
        WHERE post_id = #{post_id}
    </update>
    
    <update id="addCommunityBookmark">
	    UPDATE COMMUNITY
	    SET COMMUNITY_FOLLOW = CASE 
	        WHEN COMMUNITY_FOLLOW IS NULL THEN #{userId}
	        ELSE COMMUNITY_FOLLOW || ',' || #{userId}
	    END
	    WHERE COMMUNITY_ID = #{communityId}
	      AND (COMMUNITY_FOLLOW IS NULL OR INSTR(COMMUNITY_FOLLOW, #{userId}) = 0)
	</update>
    
    <update id="removeCommunityBookmark">
	    UPDATE COMMUNITY
	    SET COMMUNITY_FOLLOW = TRIM(',' FROM REPLACE(',' || COMMUNITY_FOLLOW || ',', ',' || #{userId} || ',', ','))
	    WHERE COMMUNITY_ID = #{communityId}
	      AND (COMMUNITY_FOLLOW LIKE '%,' || #{userId} || ',%'
	           OR COMMUNITY_FOLLOW LIKE #{userId} || ',%'
	           OR COMMUNITY_FOLLOW LIKE '%,' || #{userId}
	           OR COMMUNITY_FOLLOW = #{userId})
	</update>
    
    <select id="isCommunityBookmarkedByUser" resultType="int">
	    SELECT COUNT(*)
	    FROM COMMUNITY
	    WHERE COMMUNITY_ID = #{communityId}
	      AND INSTR(COMMUNITY_FOLLOW, #{userId}) > 0
	</select>
    
    
</mapper>