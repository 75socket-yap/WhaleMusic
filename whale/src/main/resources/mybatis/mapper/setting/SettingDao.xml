<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tech.whale.setting.dao.SettingDao">
	<resultMap id="notificationResultMap" type="map">
	    <result column="ALL_NOTIFICATION_OFF" property="all_notification_off"/>
	    <result column="LIKE_NOTIFICATION_ONOFF" property="like_notification_onoff"/>
	    <result column="COMMENT_NOTIFICATION_ONOFF" property="comment_notification_onoff"/>
	    <result column="MESSAGE_NOTIFICATION_ONOFF" property="message_notification_onoff"/>
	</resultMap>
	<select id="getProfile" resultType="com.tech.whale.setting.dto.UserInfoDto"> 
		SELECT USER_NICKNAME, USER_EMAIL, USER_IMAGE_URL, USER_PASSWORD FROM USER_INFO WHERE USER_ID = #{session_user_id}
	</select>
	<update id="updateProfile">
		UPDATE USER_INFO SET USER_NICKNAME = #{nickname}, USER_PASSWORD = #{password}, USER_IMAGE_URL = #{newProfileImage}, USER_EMAIL = #{email} WHERE USER_ID = #{session_user_id}
	</update>
	<update id="updateAccountPrivacy">
		UPDATE USER_SETTING SET ACCOUNT_PRIVACY = #{accountPrivacy} WHERE USER_ID = #{session_user_id}
	</update>
	<update id="updateNotificationSettings">
	    UPDATE USER_NOTIFICATION_ONOFF 
	    SET 
	        ALL_NOTIFICATION_OFF = #{allNotificationOff}, 
	        LIKE_NOTIFICATION_ONOFF = #{likeNotificationOnoff}, 
	        COMMENT_NOTIFICATION_ONOFF = #{commentNotificationOnoff}, 
	        MESSAGE_NOTIFICATION_ONOFF = #{messageNotificationOnoff} 
	    WHERE USER_ID = #{session_user_id}
	</update>
	<update id="updateLikeNotification">
	    UPDATE USER_NOTIFICATION_ONOFF 
	    SET 
	        LIKE_NOTIFICATION_ONOFF = #{likeNotificationOnOff} 
	    WHERE USER_ID = #{session_user_id}
	</update>
	<update id="updateCommentNotification">
	    UPDATE USER_NOTIFICATION_ONOFF 
	    SET  
	        COMMENT_NOTIFICATION_ONOFF = #{commentNotificationOnOff}
	    WHERE USER_ID = #{session_user_id}
	</update>
	<update id="updateMessageNotification">
	    UPDATE USER_NOTIFICATION_ONOFF 
	    SET 
	        MESSAGE_NOTIFICATION_ONOFF = #{messageNotificationOnOff} 
	    WHERE USER_ID = #{session_user_id}
	</update>
	<select id="getNotificationSettingsByUserId" parameterType="String" resultType="com.tech.whale.setting.dto.UserNotificationDto"> 
		SELECT ALL_NOTIFICATION_OFF, LIKE_NOTIFICATION_ONOFF, COMMENT_NOTIFICATION_ONOFF, MESSAGE_NOTIFICATION_ONOFF 
		FROM USER_NOTIFICATION_ONOFF 
		WHERE USER_ID = #{session_user_id}
	</select>
	<select id="getAccountPrivacyByUserId" resultType="com.tech.whale.setting.dto.UserSettingDto"> 
		SELECT ACCOUNT_PRIVACY FROM USER_SETTING WHERE USER_ID = #{session_user_id}
	</select>
	<select id="getBlockList" parameterType="String" resultType="com.tech.whale.setting.dto.BlockDto">
	    SELECT UI.USER_ID, UI.USER_NICKNAME, UI.USER_IMAGE_URL
		FROM BLOCK B
		JOIN USER_INFO UI
		ON B.BLOCK_USER_ID = UI.USER_ID
		WHERE B.USER_ID = (SELECT USER_ID FROM USER_INFO WHERE USER_ID = #{session_user_id})
	</select>
	<delete id="unblockUser" parameterType="map">
		DELETE FROM BLOCK WHERE USER_ID = #{session_user_id} AND BLOCK_USER_ID = #{block_userId}
	</delete>
	<select id="getDarkmode" resultType="com.tech.whale.setting.dto.UserSettingDto">
		SELECT DARKMODE_SETTING_ONOFF FROM USER_SETTING WHERE USER_ID = #{session_user_id}
	</select>
	<update id="updateDarkmode">
		UPDATE USER_SETTING SET DARKMODE_SETTING_ONOFF = #{darkmodeOn} WHERE USER_ID = #{session_user_id}
	</update>
	<select id="getStartpageSetting" resultType="com.tech.whale.setting.dto.StartpageDto">
		SELECT STARTPAGE_MUSIC_SETTING, STARTPAGE_FEED_SETTING, STARTPAGE_COMMUNITY_SETTING, STARTPAGE_MESSAGE_SETTING FROM STARTPAGE_SETTING WHERE USER_ID = #{session_user_id}
	</select>
	<update id="updateStartpageSetting">
		UPDATE STARTPAGE_SETTING
		SET
			STARTPAGE_MUSIC_SETTING = CASE WHEN #{left} = 'music' THEN 1
										   WHEN #{right} = 'music' THEN 2
										   ELSE 0
									  END,
			STARTPAGE_FEED_SETTING = CASE WHEN #{left} = 'feed' THEN 1
										  WHEN #{right} = 'feed' THEN 2
										  ELSE 0 
									 END,
			STARTPAGE_COMMUNITY_SETTING = CASE WHEN #{left} = 'community' THEN 1
									   		   WHEN #{right} = 'community' THEN 2
									   		   ELSE 0 
									   	  END,
			STARTPAGE_MESSAGE_SETTING = CASE WHEN #{left} = 'message' THEN 1
											 WHEN #{right} = 'message' THEN 2
											 ELSE 0 
									    END
		WHERE USER_ID = #{userId}
	</update>
	<select id="getPageAccessSetting" resultType="com.tech.whale.setting.dto.PageAccessDto">
		SELECT PAGE_ACCESS_MYPAGE, PAGE_ACCESS_NOTIFICATION, PAGE_ACCESS_SETTING, PAGE_ACCESS_MUSIC 
		FROM PAGE_ACCESS_SETTING 
		WHERE USER_ID = #{session_user_id}
	</select>
	<update id="updatePageAccessSetting">
	    UPDATE page_access_setting
	    SET 
	        page_access_mypage = 
	            CASE 
	                WHEN #{settingType} = 'mypage' AND #{selectedValue} = 'left' THEN 0
	                WHEN #{settingType} = 'mypage' AND #{selectedValue} = 'right' THEN 1
	                ELSE page_access_mypage
	            END,
	        page_access_notification = 
	            CASE 
	                WHEN #{settingType} = 'notification' AND #{selectedValue} = 'left' THEN 0
	                WHEN #{settingType} = 'notification' AND #{selectedValue} = 'right' THEN 1
	                ELSE page_access_notification
	            END,
	        page_access_setting = 
	            CASE 
	                WHEN #{settingType} = 'setting' AND #{selectedValue} = 'left' THEN 0
	                WHEN #{settingType} = 'setting' AND #{selectedValue} = 'right' THEN 1
	                ELSE page_access_setting
	            END,
	        page_access_music = 
	            CASE 
	                WHEN #{settingType} = 'music' AND #{selectedValue} = 'left' THEN 0
	                WHEN #{settingType} = 'music' AND #{selectedValue} = 'right' THEN 1
	                ELSE page_access_music
	            END
	    WHERE user_id = #{userId}
	</update>
	<select id="getFilteredPostLikeList" parameterType="map" resultType="com.tech.whale.setting.dto.LikeListDto">
		<choose>
			<when test="postType == '게시글'">
				SELECT P.POST_ID, P.POST_TITLE, P.POST_TEXT
				FROM POST P JOIN POST_LIKE PL
				ON P.POST_ID = PL.POST_ID
				WHERE PL.USER_ID = #{session_user_id}
				ORDER BY PL.POST_LIKE_ID ${orderBy }
			</when>
			<otherwise>
				SELECT F.FEED_ID, F.FEED_TITLE, F.FEED_TEXT
				FROM FEED F JOIN FEED_LIKE FL
				ON F.FEED_ID = FL.FEED_ID
				WHERE FL.USER_ID = #{session_user_id}
				ORDER BY FL.FEED_LIKE_ID ${orderBy }
			</otherwise>
		</choose>
	</select>
	<select id="getFilteredPostCommentList" parameterType="map" resultType="com.tech.whale.setting.dto.CommentListDto">
		<choose>
			<when test="postType == '게시글'">
				SELECT P.POST_TITLE, PC.POST_COMMENTS_TEXT
				FROM POST_COMMENTS PC JOIN POST P
				ON P.POST_ID = PC.POST_ID
				WHERE PC.USER_ID = #{session_user_id}
				ORDER BY POST_COMMENTS_ID ${orderBy }
			</when>
			<otherwise>
				SELECT F.FEED_ID, F.FEED_TEXT, F.FEED_COMMENTS_TEXT
				FROM FEED F JOIN FEED_COMMENTS FC
				ON F.FEED_ID = FC.FEED_ID
				WHERE FC.USER_ID = #{session_user_id}
				ORDER BY FC.FEED_LIKE_ID ${orderBy }
			</otherwise>
		</choose>
	</select>
	
</mapper>