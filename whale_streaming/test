package com.tech.whale.login.service;

import com.tech.whale.login.dto.UserDto;
import com.tech.whale.login.dao.UserDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpSession;
import java.util.UUID;

@Service
public class UserService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private JavaMailSender mailSender;  // JavaMailSender 주입

    private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    @Value("${spring.mail.username}")  // application.properties에 있는 발신자 이메일 주소
    private String fromEmail;

    // 사용자 인증 메서드
    public boolean authenticate(String username, String password) {
        String storedPassword = userDao.getPasswordByUsername(username);
        return passwordEncoder.matches(password, storedPassword);
    }
    
    public void checkAccessIdLogin(String username, HttpSession session) {
    	Integer accessId = userDao.checkAccessId(username);
    	session.setAttribute("access_id", accessId.toString());
    }

    // 사용자 등록 메서드 (User 객체 기반)
    public boolean registerUser(String username, String password, String email, String nickname) {
        try {
            // 비밀번호 암호화
            String encodedPassword = passwordEncoder.encode(password);

            // UserDto 객체 생성
            UserDto userDto = new UserDto(username, encodedPassword, email, nickname);

            // DB에 유저 정보 저장
            userDao.insertUserInfo(userDto);

            // 환경 설정 기본값 세팅
            userDao.insertUserNotification(username);
            userDao.insertPageAccessSetting(username);
            userDao.insertStartPageSetting(username);
            userDao.insertBlock(username);
            userDao.insertUserSetting(username);
            userDao.insertFollow(username);
            Integer followId = userDao.selectFollowId(username);
            userDao.insertProfile(username, followId);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // 기존 사용자 등록 메서드 (개별 필드 기반)
    public void registerUser(String username, String password, String email) {
        String encodedPassword = passwordEncoder.encode(password);
        userDao.saveUser(password, encodedPassword, email);
    }

    // 이메일 중복 확인
    public boolean isEmailRegistered(String email) {
        Integer count = userDao.existsByEmail(email);
        return count != null && count > 0;
    }

    // 비밀번호 재설정 이메일 전송
    public void sendResetPasswordEmail(String email) {
        String token = generateRandomToken();
        String resetLink = "https://localhost:9002/whale/reset-password.html?token=" + token;
        userDao.saveResetToken(email, token);
        
        // 유저 아이디 가져오기 (예를 들어 이메일로 조회)
        String userId = userDao.getUserIdByEmail(email);

        // 이메일 전송 로직
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);  // 발신자 이메일 주소를 환경 변수에서 가져옴
        message.setTo(email);
        message.setSubject("Whale 계정 비밀번호 재설정");
        message.setText(String.format(
                "안녕하세요, %s님.\n\n비밀번호 재설정을 위해 다음 링크를 클릭하세요:\n%s\n\n해당 링크는 1시간 동안 유효합니다.\n\n감사합니다.\nWhale 팀",
                userId, resetLink
        ));
        mailSender.send(message);
    }

    // 비밀번호 재설정 토큰 검증
    public boolean verifyResetToken(String token) {
    	Integer count = userDao.isValidToken(token);
        return count != null && count > 0;
    }

    // 비밀번호 업데이트
    public void updatePassword(String token, String newPassword) {
        String hashedPassword = passwordEncoder.encode(newPassword);
        userDao.updatePasswordByToken(hashedPassword, token);
    }

    // 랜덤 토큰 생성
    private String generateRandomToken() {
        return UUID.randomUUID().toString();  // UUID로 랜덤 토큰 생성
    }
}
